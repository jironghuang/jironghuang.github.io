<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>data_analytics on Jirong&#39;s sandbox</title>
    <link>jironghuang.github.io/categories/data_analytics/</link>
    <description>Recent content in data_analytics on Jirong&#39;s sandbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Sat, 01 Jun 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="jironghuang.github.io/categories/data_analytics/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Loading excel data with correct variable types</title>
      <link>jironghuang.github.io/post/load_data_with_correct_types/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>jironghuang.github.io/post/load_data_with_correct_types/</guid>
      <description>


&lt;div id=&#34;loading-data-with-data-types&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Loading data with data types&lt;/h3&gt;
&lt;p&gt;When reading static files into R or Python, most of the times we are lazy as we load the data with no regard to the data types.&lt;/p&gt;
&lt;p&gt;But in mission critical ETL jobs or Data analytics workflow, data types are quintessential and there’s a fine line between life and death. Ok, I’m exaggerating here.&lt;/p&gt;
&lt;p&gt;What I’ve written below is a swiss army knife function to read an excel file: 1st tab is data and 2nd tab is the variable types (e.g. database variable types mapped to R variable types)&lt;/p&gt;
&lt;p&gt;Note: If I read or write to database, I would have to modify my function below. Oh well.&lt;/p&gt;
&lt;p&gt;The steps in the function are pretty simple,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First I read in the data type&lt;/li&gt;
&lt;li&gt;Second I read in the column name of the dataset&lt;/li&gt;
&lt;li&gt;Third I left join the column names to its data type from database (or .sav or .dta or .sas files)&lt;/li&gt;
&lt;li&gt;Fourth I left join the (DB variable types) to (R data types) translation into the column names&lt;/li&gt;
&lt;li&gt;Lastly, I read in the dataset through read_excel functions with col_types as the parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here you go! Hope this is useful.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Reading excel data together with data types
#&amp;#39; @title Reading data with data types
#&amp;#39; @param spName_file Path of the data file
#&amp;#39; @param spTab_name_data Tab name of data
#&amp;#39; @param spTab_name_dataType Tab name of data type
#&amp;#39; @param sp_dataType_col_name Column name of dataType&amp;#39;s (variables column)
#&amp;#39; @param sp_dataType_datatype_name Column name of dataType&amp;#39;s (data type column)
#&amp;#39; @param dp_r_hana_type data frame of R to hana variable types conversion
#&amp;#39; @param sp_r_hana_type_DBType Column name of r_hana_type (DB_TYPE column)
#&amp;#39; @param sp_r_hana_type_RType Column name of r_hana_type (R_TYPE column)
#&amp;#39; @return A data frame with corresponding data types
#&amp;#39; @export
df_read_data_with_types = function(spName_file, spTab_name_data,
                                   spTab_name_dataType,
                                   sp_dataType_col_name, sp_dataType_datatype_name,
                                   dp_r_hana_type, sp_r_hana_type_DBType, sp_r_hana_type_RType){

  #Read in data types
  data_type = df_read_tab(spName_file, spTab_name_dataType)

  #Read in just first row of dataset
  col_name = read_excel(spName_file, spTab_name_data, n_max = 1)
  col_name = data.frame(col_name = names(col_name)); col_name$col_name = as.character(col_name$col_name)
  col_name$column_order = 1:nrow(col_name)

  #Left join data type to name
  col_name = col_name %&amp;gt;%
    dplyr::left_join(data_type, by = c(&amp;quot;col_name&amp;quot; = sp_dataType_col_name))

  #Split this from above because of errors. weird
  col_name = base::merge(col_name, dp_r_hana_type,
                   by.x = sp_dataType_datatype_name, by.y = sp_r_hana_type_DBType,
                   all.x = T)

  col_name = arrange(col_name, column_order)

  #Read in full dataset with assignment of classes (look at readxl.tidyverse.org)
  data = readxl::read_excel(spName_file, spTab_name_data, col_types = col_name[, sp_r_hana_type_RType])

  return(data)
}

# spName_file = &amp;#39;./data/input/TB_OVSS_FNB_FACT.xlsx&amp;#39;
# spTab_name_data = &amp;#39;data&amp;#39;
# spTab_name_dataType = &amp;#39;data_type&amp;#39;
# sp_dataType_col_name = &amp;#39;COLUMN_NAME&amp;#39; 
# sp_dataType_datatype_name = &amp;#39;DATA_TYPE_NAME&amp;#39;
# dp_r_hana_type = r_hana_type 
# sp_r_hana_type_DBType = &amp;#39;DB_TYPE&amp;#39; 
# sp_r_hana_type_RType = &amp;#39;R_TYPE&amp;#39;
#
# a = df_read_data_with_types (spName_file, spTab_name_data,
#                          spTab_name_dataType,
#                          sp_dataType_col_name, sp_dataType_datatype_name,
#                          dp_r_hana_type, sp_r_hana_type_DBType, sp_r_hana_type_RType)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
