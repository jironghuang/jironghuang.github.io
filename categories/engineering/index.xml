<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>engineering on Jirong&#39;s sandbox</title>
    <link>/categories/engineering/</link>
    <description>Recent content in engineering on Jirong&#39;s sandbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Mon, 24 Aug 2020 11:50:49 +0800</lastBuildDate>
    <atom:link href="/categories/engineering/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Designing, Building and Deploying a Fully Automated Algorithmic Trading System</title>
      <link>/post/designing-and-deploying-a-fully-automated-algorithmic-trading-system/</link>
      <pubDate>Mon, 24 Aug 2020 11:50:49 +0800</pubDate>
      
      <guid>/post/designing-and-deploying-a-fully-automated-algorithmic-trading-system/</guid>
      <description>

&lt;h2 id=&#34;designing-building-and-deploying-a-fully-automated-algorithmic-trading-system&#34;&gt;Designing, Building and Deploying a Fully Automated Algorithmic Trading System&lt;/h2&gt;

&lt;p&gt;As I developed several inter-day trading/ portfolio management algorithms, I also embarked on a journey in parallel to develop a fully automated execution framework that could satisfy my requirements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Previously orders were executed manually after signals are generated automatically.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;requirements&#34;&gt;Requirements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;A relatively slow trading system triggered by an hourly task scheduler during trading hours. I’m using Linux cron jobs for this.&lt;/li&gt;
&lt;li&gt;A non event-driven framework. I’m relying on ib_sync framework for my algorithms executed in interactive brokers. The alternative is an event-driven framework (e.g. official IB framework based on asyncio) based on my experience is hard to debug and would be an overkill for my low to medium frequency trading/ portfolio management system.&lt;/li&gt;
&lt;li&gt;Automated trading execution and portfolio adjustments in relation to risks, signals and leverage cap.&lt;/li&gt;
&lt;li&gt;Data ingestion from multiple data sources/ APIs for signal processing, trade executions and logs.&lt;/li&gt;
&lt;li&gt;Inclusion of safeguards and circuit breakers in place before firing any trades.&lt;/li&gt;
&lt;li&gt;Notification through email for errors and daily updates @ start, middle and end of trading day.
-Able to integrate the above steps through Python.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;steps-taken&#34;&gt;Steps taken&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Without diving into the details of the code, here is the the general flow of my framework. The ‘main’ programs and execution flowcharts are appended at the end of the article.&lt;/li&gt;
&lt;li&gt;Connect to my brokerage account as a new session.
Cancel any open orders. I adopt this option instead of ‘modifying orders’ as it’s much easier. If I were to modify orders, I would have to keep track of the number of filled orders and unfilled orders. As my algorithm is triggered hourly, any unfilled orders in that hourly slot are deemed to deviate significantly from the current price and the chance of being executed at the limit price is pretty low. That being said, in my next iteration, I would prefer to invest time in writing code to ‘modify orders’ instead of a simplistic ‘cancel orders’.&lt;/li&gt;
&lt;li&gt;Generate forecast i.e. Required leverage and weightage from different tickers. I currently write them as local files instead of committing them to a database or storing them as variables as they are more robust during live trading. I do not have to worry about concurrency issues (else codes have to consider mutex and locks), database downtime.&lt;/li&gt;
&lt;li&gt;Obtain net liquidation value of account.&lt;/li&gt;
&lt;li&gt;Read in ticker weights and leverage from file written out in step 3.&lt;/li&gt;
&lt;li&gt;Create order files for different tickers including actions such as ‘Buy’, ‘Sell’ or ‘Do nothing’, Quantity and Limit price. At the moment, I’m using Adaptive Limit 7. Order from Interactive Brokers — which based on my understanding is a discretionary order with limit price as an upper bound. At the moment, I’m unwilling to invest more time on this to gain any further execution alpha as it could be a non-trivial task to dig into the bid-ask order books.&lt;/li&gt;
&lt;li&gt;Check if there are any errors from step 1 to 4 through an error flag. If there is any error, orders will not be sent. If everything cleared, the program will send the orders to the exchange.&lt;/li&gt;
&lt;li&gt;Trades, if any are recorded into a csv file.&lt;/li&gt;
&lt;li&gt;Save current snapshot which includes current positions, trades, net liquidation value and leverage utilized and margins.&lt;/li&gt;
&lt;li&gt;If errors are encountered, an alert will be sent to my gmail.&lt;/li&gt;
&lt;li&gt;Daily updates/ snapshots are sent to my gmail at the start, middle and end of session.&lt;/li&gt;
&lt;li&gt;If the program is triggered at 5am SGT (after US trading hours), the snapshots and trades information are committed to my database.&lt;/li&gt;
&lt;li&gt;Disconnect from current session.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;technology-stack&#34;&gt;Technology stack&lt;/h3&gt;

&lt;p&gt;If you are keen to know my technology stack, I’m currently using the following,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux Mint&lt;/li&gt;
&lt;li&gt;Mint Box, 8GB RAM (but any laptop or virtual private server would suffice)&lt;/li&gt;
&lt;li&gt;Interactive brokers brokerage account (but the framework could be adapted to any brokerages with APIs)&lt;/li&gt;
&lt;li&gt;Interactive brokers gateway (IB Trade Worker Station is an alternative but I do not require any graphical user interface for my purpose)&lt;/li&gt;
&lt;li&gt;ib_insync framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;word-of-caution&#34;&gt;Word of Caution&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;This framework is not ideal for tick by tick or even bar by bar (seconds or minutes) trading algorithm since it’s not predicated on speed. An event-driven framework would be a better alternative if speed is required.&lt;/li&gt;
&lt;li&gt;I’m relying on brokerage server side to keep track of the current positions, margins, leverage and orders. In the next stage of development beyond this Minimum Viable Product, I’m keen to develop my own accounting system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;appendix&#34;&gt;Appendix&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;/post/img/prog1.png&#34; alt=&#34;/post/img/prog1.png&#34;&gt;
&lt;img src=&#34;/post/img/prog2.png&#34; alt=&#34;/post/img/prog2.png&#34;&gt;
&lt;img src=&#34;/post/img/flow1.jpeg&#34; alt=&#34;/post/img/flow1.jpeg&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
